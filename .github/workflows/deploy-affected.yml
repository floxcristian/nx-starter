name: Deploy Affected APIs to Cloud Run

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  GAR_LOCATION: ${{ vars.GCP_REGION }}-docker.pkg.dev
  GAR_REPOSITORY: ${{ vars.GAR_REPOSITORY }}

jobs:
  # ##########################################################################
  # # JOB 1: DETERMINAR QUÉ APLICACIONES FUERON AFECTADAS
  # ##########################################################################
  determine-affected:
    name: Determine Affected Services
    runs-on: ubuntu-latest
    outputs:
      # El output será un string JSON que la siguiente matriz puede leer
      affected_matrix: ${{ steps.get-affected.outputs.affected_matrix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 es crucial para que Nx pueda comparar el commit actual con el de 'main'
          fetch-depth: 0

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10 # Asegúrate de que coincida con tu packageManager

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Get Affected Services and Build Matrix
        id: get-affected
        run: |
          # 1. Obtenemos la lista de apps afectadas (ej: "api-users api-orders")
          AFFECTED_APPS=$(npx nx affected:apps --base=origin/main --head=HEAD --plain | tr '\n' ' ')

          # 2. Si no hay apps afectadas, generamos un JSON array vacío
          if [ -z "$AFFECTED_APPS" ]; then
            echo "No applications were affected."
            echo "affected_matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 3. Si hay apps, creamos un objeto JSON para cada una con su puerto
          #    (Esto es avanzado: lee la configuración del puerto desde project.json)
          JSON_MATRIX="{\"include\":["
          for app in $AFFECTED_APPS; do
            # Asumimos un puerto por defecto si no se encuentra
            port=$(npx nx show project $app --json | jq -r ".targets.serve.options.port // 3000")
            JSON_MATRIX+=$(jq -n --arg name "$app" --argjson port "$port" '{"name":$name,"port":$port}')
            JSON_MATRIX+=","
          done
          # Quitamos la última coma y cerramos el JSON
          JSON_MATRIX=$(echo "$JSON_MATRIX" | sed 's/,$//')
          JSON_MATRIX+="]}"

          echo "Affected matrix generated: $JSON_MATRIX"
          echo "affected_matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT

  # ##########################################################################
  # # JOB 2: CONSTRUIR Y DESPLEGAR SOLO LAS APPS AFECTADAS
  # ##########################################################################
  build-and-deploy:
    name: Deploy ${{ matrix.service.name }}
    needs: determine-affected # Depende del job anterior
    if: fromJson(needs.determine-affected.outputs.affected_matrix).include[0] != null # Solo se ejecuta si la matriz no está vacía
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      # La matriz ahora se genera dinámicamente con el output del job anterior
      matrix: ${{ fromJson(needs.determine-affected.outputs.affected_matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK and Authorize Docker
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Build and Push Docker Image
        id: build-image
        run: |
          IMAGE_BASE_NAME="${{ env.GAR_LOCATION }}/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ matrix.service.name }}"
          IMAGE_SHA_TAG="$IMAGE_BASE_NAME:${{ github.sha }}"
          IMAGE_LATEST_TAG="$IMAGE_BASE_NAME:latest"

          docker build . \
            --target production \
            -t "$IMAGE_SHA_TAG" \
            -t "$IMAGE_LATEST_TAG" \
            --build-arg APP_NAME=${{ matrix.service.name }} \
            --build-arg APP_PORT=${{ matrix.service.port }}

          docker push "$IMAGE_SHA_TAG"
          docker push "$IMAGE_LATEST_TAG"

          echo "image_sha_tag=$IMAGE_SHA_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy ${{ matrix.service.name }} \
            --image ${{ steps.build-image.outputs.image_sha_tag }} \
            --region ${{ env.GCP_REGION }} \
            --port ${{ matrix.service.port }} \
            --allow-unauthenticated \
            --platform managed \
            --quiet
