version: '3.8'

services:
  # === FRONTEND ===
  front-admin:
    build:
      context: .
      dockerfile: apps/front-admin/Dockerfile
    container_name: front-admin
    ports:
      - '4200:80'
    environment:
      - NODE_ENV=production
    depends_on:
      - api-users
      - api-orders
    networks:
      - micro-apis-network
    restart: unless-stopped

  # === BACKEND APIS ===
  api-users:
    build:
      context: .
      dockerfile: apps/api-users/Dockerfile
    container_name: api-users
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key-change-in-production}
      - CORS_ORIGIN=http://localhost:4200
    networks:
      - micro-apis-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health',
        ]
      timeout: 10s
      retries: 3
      start_period: 40s
      interval: 30s

  api-orders:
    build:
      context: .
      dockerfile: apps/api-orders/Dockerfile
    container_name: api-orders
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - PORT=3001
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_mock}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-mock-invoices-bucket}
      - SMTP_HOST=${SMTP_HOST:-smtp.mailtrap.io}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-mock-user}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-mock-password}
      - CORS_ORIGIN=http://localhost:4200
    networks:
      - micro-apis-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3001/health',
        ]
      timeout: 10s
      retries: 3
      start_period: 40s
      interval: 30s

  # === REVERSE PROXY (API Gateway) ===
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - '8080:80'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-users
      - api-orders
    networks:
      - micro-apis-network
    restart: unless-stopped

  # === DATABASES (opcional para desarrollo) ===
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=microapis
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - micro-apis-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - micro-apis-network
    restart: unless-stopped

  # === MONITORING ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - micro-apis-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3030:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - micro-apis-network
    restart: unless-stopped

networks:
  micro-apis-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
