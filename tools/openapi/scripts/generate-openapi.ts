/**
 * @fileoverview Generador de especificaciones OpenAPI para Google Cloud API Gateway
 *
 * Este generador extrae configuraci√≥n REAL de Swagger desde aplicaciones NestJS,
 * combina m√∫ltiples servicios en una especificaci√≥n unificada y la optimiza
 * para funcionar con Google Cloud API Gateway.
 *
 * CARACTER√çSTICAS PRINCIPALES:
 * - ‚úÖ Auto-discovery de servicios v√≠a variables de entorno
 * - ‚úÖ Extracci√≥n real de OpenAPI desde c√≥digo NestJS
 * - ‚úÖ Conversi√≥n autom√°tica OpenAPI 3.0 ‚Üí Swagger 2.0
 * - ‚úÖ Configuraci√≥n optimizada para Google Cloud
 * - ‚úÖ Validaci√≥n robusta con Joi
 * - ‚úÖ Logging estructurado y mensajes √∫tiles
 *
 * ESTRUCTURA DEL C√ìDIGO:
 * 1. üìã TIPOS Y INTERFACES - Definiciones TypeScript centralizadas
 * 2. üîç VALIDACI√ìN - Esquemas Joi para entorno y configuraci√≥n
 * 3. üöÄ DESCUBRIMIENTO - Auto-discovery de servicios API
 * 4. üì¶ CARGA DE M√ìDULOS - Importaci√≥n din√°mica de m√≥dulos NestJS
 * 5. ‚öôÔ∏è  GENERACI√ìN OPENAPI - Extracci√≥n desde c√≥digo real
 * 6. ‚òÅÔ∏è  GOOGLE CLOUD - Optimizaciones espec√≠ficas
 * 7. üíæ UTILIDADES - Funciones auxiliares
 * 8. üéØ ORQUESTADOR PRINCIPAL - Funci√≥n main que coordina todo
 *
 * @author Equipo de Desarrollo
 * @version 2.0.0 (Refactorizado y documentado)
 * @since 2025-09-17
 */

import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder, OpenAPIObject } from '@nestjs/swagger';
import { OpenAPIV3 } from 'openapi-types';
import * as fs from 'fs';
import * as path from 'path';
import * as YAML from 'yaml';
import * as Joi from 'joi';
const Converter = require('api-spec-converter');

// ================================================================================================
// üìã SECCI√ìN 1: TIPOS Y INTERFACES
// ================================================================================================
/**
 * Representa un m√≥dulo de servicio NestJS que puede ser instanciado
 * para la generaci√≥n de documentaci√≥n OpenAPI.
 */
interface ServiceModule {
  /** Constructor del m√≥dulo */
  new (...args: unknown[]): unknown;
  /** Nombre del m√≥dulo para identificaci√≥n */
  name: string;
}

/**
 * Error que puede ocurrir durante la conversi√≥n de OpenAPI 3.0 a Swagger 2.0
 */
interface ConversionError {
  /** Mensaje descriptivo del error */
  message?: string;
}

/**
 * Resultado de la conversi√≥n de especificaci√≥n OpenAPI
 */
interface ConversionResult {
  /** Especificaci√≥n resultante en formato Swagger 2.0 */
  spec: SwaggerV2Document;
  /** Lista de errores o advertencias durante la conversi√≥n */
  errors?: ConversionError[];
}

/**
 * Documento OpenAPI en formato Swagger 2.0 compatible con Google Cloud API Gateway
 */
interface SwaggerV2Document {
  /** Versi√≥n de la especificaci√≥n Swagger */
  swagger: string;
  /** Informaci√≥n b√°sica de la API */
  info: {
    /** T√≠tulo de la API */
    title: string;
    /** Descripci√≥n opcional de la API */
    description?: string;
    /** Versi√≥n de la API */
    version: string;
    /** Propiedades adicionales para Google Cloud */
    [key: string]: unknown;
  };
  /** Paths y operaciones de la API */
  paths?: Record<string, Record<string, unknown>>;
  /** Definiciones de modelos de datos */
  definitions?: Record<string, unknown>;
  /** Definiciones de esquemas de seguridad */
  securityDefinitions?: Record<string, SecurityDefinition>;
  /** Configuraci√≥n de seguridad global */
  security?: Array<Record<string, string[]>>;
  /** Propiedades adicionales */
  [key: string]: unknown;
}

/**
 * Definici√≥n de un esquema de seguridad para autenticaci√≥n
 */
interface SecurityDefinition {
  /** Tipo de autenticaci√≥n (apiKey, oauth2, etc.) */
  type: string;
  /** Nombre del par√°metro (para apiKey) */
  name?: string;
  /** Ubicaci√≥n del par√°metro (query, header, etc.) */
  in?: string;
  /** URL de autorizaci√≥n (para oauth2) */
  authorizationUrl?: string;
  /** Flujo de autorizaci√≥n (para oauth2) */
  flow?: string;
  /** Propiedades adicionales espec√≠ficas de Google Cloud */
  [key: string]: unknown;
}

/**
 * Configuraci√≥n de un servicio API individual
 */
interface ServiceConfig {
  /** Nombre identificador del servicio */
  name: string;
  /** M√≥dulo NestJS del servicio (cargado din√°micamente) */
  module: ServiceModule | null;
  /** Variable de entorno que contiene la URL del servicio */
  urlEnvVar: string;
  /** Prefijo de path para las rutas del servicio */
  pathPrefix: string;
  /** T√≠tulo legible del servicio */
  title: string;
}

/**
 * Configuraci√≥n principal del generador OpenAPI
 */
interface Config {
  /** Nombre del archivo de salida */
  outputFile: string;
  /** T√≠tulo del gateway API */
  gatewayTitle: string;
  /** Descripci√≥n del gateway API */
  gatewayDescription: string;
  /** Versi√≥n del gateway (formato semver) */
  gatewayVersion: string;
  /** Protocolo de comunicaci√≥n con los backends */
  protocol: string;
  /** ID del proyecto de Google Cloud */
  projectId: string;
}

// ================================================================================================
// üöÄ SECCI√ìN 3: DESCUBRIMIENTO AUTOM√ÅTICO DE SERVICIOS
// ================================================================================================

/**
 * Descubre autom√°ticamente los servicios API disponibles en el workspace
 *
 * Busca variables de entorno que terminen en '_BACKEND_URL' y verifica
 * que existan las aplicaciones correspondientes en el filesystem.
 *
 * @returns Array de configuraciones de servicios descubiertos
 *
 * @example
 * ```typescript
 * // Con USERS_BACKEND_URL=https://api.example.com/users
 * // y apps/api-users/ existente
 * const services = discoverServices();
 * console.log(services[0].name); // 'users'
 * ```
 *
 * @throws {Error} Si no se encuentran servicios configurados
 */
function discoverServices(): ServiceConfig[] {
  console.log('üîç Auto-descubriendo servicios API...');

  const services: ServiceConfig[] = [];
  const envVars = process.env;

  // Buscar todas las variables que terminen en _BACKEND_URL
  const backendUrlPattern = /^(.+)_BACKEND_URL$/;

  Object.keys(envVars).forEach((envKey) => {
    const match = envKey.match(backendUrlPattern);
    if (match && envVars[envKey]) {
      const serviceName = match[1].toLowerCase();

      // Solo incluir servicios que tengan una app correspondiente
      const appPath = `apps/api-${serviceName}`;
      const appModulePath = `${appPath}/src/app/app.module.ts`;

      try {
        const fs = require('fs');
        if (fs.existsSync(appModulePath)) {
          services.push({
            name: serviceName,
            module: null,
            urlEnvVar: envKey,
            pathPrefix: `/${serviceName}`,
            title: `${
              serviceName.charAt(0).toUpperCase() + serviceName.slice(1)
            } API`,
          });
          console.log(`   ‚úÖ ${serviceName}: ${envVars[envKey]}`);
        } else {
          console.log(`   ‚ö†Ô∏è  ${serviceName}: App no encontrada en ${appPath}`);
        }
      } catch (error) {
        console.log(
          `   ‚ùå ${serviceName}: Error verificando app - ${
            error instanceof Error ? error.message : String(error)
          }`
        );
      }
    }
  });

  if (services.length === 0) {
    console.error('‚ùå No se encontraron servicios API configurados.');
    console.error('üí° Para que el auto-discovery funcione, necesitas:');
    console.error(
      '   1. Apps que empiecen con "api-" en apps/ (ej: apps/api-users)'
    );
    console.error(
      '   2. Variables de entorno *_BACKEND_URL (ej: USERS_BACKEND_URL)'
    );
    console.error('   3. M√≥dulo app.module.ts en src/app/ de cada API');
    process.exit(1);
  }

  return services;
}

// Obtener servicios din√°micamente
const SERVICES = discoverServices();

// ================================================================================================
// üîç SECCI√ìN 2: VALIDACI√ìN CON JOI
// ================================================================================================
/**
 * Esquema de validaci√≥n para la configuraci√≥n principal del generador
 *
 * Define las reglas de validaci√≥n para todos los par√°metros de configuraci√≥n,
 * incluyendo valores por defecto y patrones requeridos.
 */
const configSchema = Joi.object({
  outputFile: Joi.string().min(1).default('openapi-gateway.yaml'),
  gatewayTitle: Joi.string().min(1).default('Monorepo API Gateway'),
  gatewayDescription: Joi.string()
    .min(1)
    .default('Gateway principal que unifica todos los microservicios.'),
  gatewayVersion: Joi.string()
    .pattern(/^\d+\.\d+\.\d+(-[a-zA-Z0-9-]+)?$/)
    .default('1.0.0'),
  protocol: Joi.string().valid('http', 'https').default('https'),
  projectId: Joi.string().min(1).required(),
});

/**
 * Esquema de validaci√≥n para variables de entorno b√°sicas del sistema
 *
 * Valida las variables de entorno requeridas y opcionales,
 * permitiendo variables adicionales no especificadas.
 */
const environmentSchema = Joi.object({
  // Variables din√°micas de servicios (se validan por separado)
  GOOGLE_CLOUD_PROJECT: Joi.string().min(1).required(),
  OPENAPI_OUTPUT_FILE: Joi.string().optional(),
  GATEWAY_TITLE: Joi.string().optional(),
  GATEWAY_DESCRIPTION: Joi.string().optional(),
  GATEWAY_VERSION: Joi.string().optional(),
  BACKEND_PROTOCOL: Joi.string().valid('http', 'https').optional(),
}).unknown(true); // Permitir otras variables de entorno

/**
 * Valida las variables de entorno b√°sicas del sistema
 *
 * Verifica que todas las variables de entorno requeridas est√©n presentes
 * y tengan valores v√°lidos seg√∫n el esquema definido.
 *
 * @example
 * ```typescript
 * try {
 *   validateEnvironment();
 *   console.log('‚úÖ Variables de entorno v√°lidas');
 * } catch (error) {
 *   console.error('‚ùå Error:', error.message);
 * }
 * ```
 *
 * @throws {Error} Si las variables de entorno no son v√°lidas
 */
function validateEnvironment(): void {
  console.log('üîç Validando variables de entorno...');

  const { error } = environmentSchema.validate(process.env);
  if (error) {
    console.error('‚ùå Error en variables de entorno:');
    error.details.forEach((detail: Joi.ValidationErrorItem) => {
      console.error(`   - ${detail.message}`);
    });
    console.error('\nüí° Variables requeridas:');
    console.error('   export GOOGLE_CLOUD_PROJECT=tu-proyecto-id');
    process.exit(1);
  }
}

/**
 * Construye la configuraci√≥n final combinando argumentos CLI, variables de entorno y defaults
 *
 * Procesa los argumentos de l√≠nea de comandos, los combina con variables de entorno
 * y aplica validaci√≥n usando el esquema Joi definido.
 *
 * @returns Configuraci√≥n validada y completa
 *
 * @example
 * ```typescript
 * const config = getConfig();
 * console.log(`Generando ${config.gatewayTitle} v${config.gatewayVersion}`);
 * ```
 *
 * @throws {Error} Si la configuraci√≥n no es v√°lida
 */
function getConfig(): Config {
  const args = process.argv.slice(2).reduce((acc, arg, index, arr) => {
    if (arg.startsWith('--')) {
      const key = arg.slice(2);
      const value =
        arr[index + 1] && !arr[index + 1].startsWith('--')
          ? arr[index + 1]
          : true;
      acc[key] = value;
    }
    return acc;
  }, {} as Record<string, string | boolean>);

  const rawConfig = {
    outputFile: args['output'] || process.env['OPENAPI_OUTPUT_FILE'],
    gatewayTitle: args['title'] || process.env['GATEWAY_TITLE'],
    gatewayDescription:
      args['description'] || process.env['GATEWAY_DESCRIPTION'],
    gatewayVersion: args['version'] || process.env['GATEWAY_VERSION'],
    protocol: args['protocol'] || process.env['BACKEND_PROTOCOL'],
    projectId: args['project-id'] || process.env['GOOGLE_CLOUD_PROJECT'],
  };

  const { error, value } = configSchema.validate(rawConfig);

  if (error) {
    console.error('‚ùå Error en configuraci√≥n:');
    error.details.forEach((detail: Joi.ValidationErrorItem) => {
      console.error(`   - ${detail.message}`);
    });
    console.error('\nüí° Verifica tus variables de entorno o argumentos CLI');
    process.exit(1);
  }

  return value as Config;
}

// ================================================================================================
// üì¶ SECCI√ìN 4: CARGA DIN√ÅMICA DE M√ìDULOS NESTJS
// ================================================================================================

/**
 * Carga din√°micamente el m√≥dulo de una aplicaci√≥n NestJS
 *
 * Intenta cargar desde diferentes ubicaciones en orden de prioridad:
 * 1. M√≥dulo principal de la app (apps/api-{service}/src/app/app.module)
 * 2. M√≥dulo de dominio (libs/{service}-domain/src/lib/{service}-domain.module)
 *
 * @param serviceName - Nombre del servicio a cargar
 * @returns Promise que resuelve al m√≥dulo cargado
 *
 * @example
 * ```typescript
 * try {
 *   const module = await loadAppModule('users');
 *   console.log(`M√≥dulo cargado: ${module.name}`);
 * } catch (error) {
 *   console.error('Error cargando m√≥dulo:', error.message);
 * }
 * ```
 *
 * @throws {Error} Si no se puede cargar el m√≥dulo desde ninguna ubicaci√≥n
 */
async function loadAppModule(serviceName: string): Promise<ServiceModule> {
  try {
    // Intentar cargar desde diferentes ubicaciones
    const possiblePaths = [
      // 1. Intentar cargar desde app module (recomendado)
      `../../../apps/api-${serviceName}/src/app/app.module`,
      // 2. Fallback: cargar desde domain module
      `../../../libs/${serviceName}-domain/src/lib/${serviceName}-domain.module`,
    ];

    for (const modulePath of possiblePaths) {
      try {
        console.log(`   üì¶ Intentando cargar desde: ${modulePath}`);
        const moduleImport = await import(modulePath);

        // Buscar el m√≥dulo exportado autom√°ticamente
        const moduleClass =
          moduleImport.AppModule ||
          moduleImport[
            `${
              serviceName.charAt(0).toUpperCase() + serviceName.slice(1)
            }DomainModule`
          ] ||
          moduleImport.default ||
          Object.values(moduleImport).find(
            (exp) =>
              typeof exp === 'function' &&
              exp.name &&
              exp.name.includes('Module')
          );

        if (moduleClass) {
          console.log(`   ‚úÖ M√≥dulo cargado: ${moduleClass.name}`);
          return moduleClass;
        }
      } catch {
        console.log(`   ‚ö†Ô∏è  Path no disponible: ${modulePath}`);
        continue;
      }
    }

    throw new Error(
      `No se pudo cargar m√≥dulo para el servicio: ${serviceName}`
    );
  } catch (error) {
    console.error(`‚ùå Error cargando m√≥dulo para ${serviceName}:`, error);
    throw error;
  }
}

// ================================================================================================
// ‚öôÔ∏è SECCI√ìN 5: GENERACI√ìN DE ESPECIFICACIONES OPENAPI
// ================================================================================================

/**
 * Genera un documento Swagger/OpenAPI desde un m√≥dulo NestJS
 *
 * Crea una aplicaci√≥n NestJS temporal, configura Swagger y extrae
 * la especificaci√≥n OpenAPI generada desde el c√≥digo real.
 *
 * @param appModule - M√≥dulo NestJS a procesar
 * @param title - T√≠tulo para la documentaci√≥n
 * @returns Promise que resuelve al documento OpenAPI generado
 *
 * @example
 * ```typescript
 * const UsersModule = await import('./users.module');
 * const doc = await buildSwagger(UsersModule.AppModule, 'Users API');
 * console.log(`Generado documento con ${Object.keys(doc.paths).length} paths`);
 * ```
 *
 * @throws {Error} Si falla la creaci√≥n de la aplicaci√≥n o generaci√≥n del documento
 */
const buildSwagger = async (
  appModule: ServiceModule,
  title: string
): Promise<OpenAPIObject> => {
  console.log(`   üèóÔ∏è  Creando aplicaci√≥n NestJS para ${title}...`);
  const app = await NestFactory.create(appModule, {
    logger: false,
    abortOnError: false,
  });

  console.log(`   üìã Configurando Swagger para ${title}...`);
  const config = new DocumentBuilder()
    .setTitle(title)
    .setDescription(`API del servicio ${title}`)
    .setVersion('1.0')
    .addBearerAuth({ type: 'http', bearerFormat: 'JWT' })
    .build();

  console.log(`   üìä Generando documento OpenAPI para ${title}...`);
  const document = SwaggerModule.createDocument(app, config);

  console.log(`   üîß Cerrando aplicaci√≥n ${title}...`);
  await app.close();

  return document;
};

/**
 * Valida y obtiene las URLs de todos los servicios descubiertos
 *
 * Verifica que todas las URLs de servicios sean v√°lidas y accesibles,
 * proporcionando mensajes de error √∫tiles y ejemplos cuando fallan.
 *
 * @returns Objeto con las URLs validadas mapeadas por variable de entorno
 *
 * @example
 * ```typescript
 * const validUrls = validateServiceUrls();
 * console.log(validUrls['USERS_BACKEND_URL']); // "https://api.example.com/users"
 * ```
 *
 * @throws {Error} Si alguna URL no es v√°lida
 */
function validateServiceUrls(): Record<string, string> {
  console.log('üîç Validando URLs de servicios...');

  const envVars: Record<string, string> = {};
  const errors: string[] = [];

  for (const service of SERVICES) {
    const value = process.env[service.urlEnvVar];

    if (!value) {
      errors.push(`${service.urlEnvVar} es requerida`);
      continue;
    }

    // Validar que sea una URL v√°lida
    const urlSchema = Joi.string()
      .uri({ scheme: ['http', 'https'] })
      .required();
    const { error } = urlSchema.validate(value);

    if (error) {
      errors.push(
        `${service.urlEnvVar} debe ser una URL v√°lida (http/https): ${value}`
      );
      continue;
    }

    envVars[service.urlEnvVar] = value;
  }

  if (errors.length > 0) {
    console.error('‚ùå Errores en URLs de servicios:');
    errors.forEach((error) => {
      console.error(`   - ${error}`);
    });
    console.error('\nüí° Ejemplo de URLs v√°lidas:');
    SERVICES.forEach((service) => {
      console.error(
        `   export ${service.urlEnvVar}=https://api-${service.name}-xxx.run.app/api`
      );
    });
    process.exit(1);
  }

  return envVars;
}

// ================================================================================================
// ‚òÅÔ∏è SECCI√ìN 6: OPTIMIZACIONES PARA GOOGLE CLOUD API GATEWAY
// ================================================================================================

/**
 * Mejora una especificaci√≥n Swagger 2.0 con configuraciones espec√≠ficas de Google Cloud
 *
 * A√±ade metadatos de gesti√≥n, endpoints, esquemas de seguridad y configuraci√≥n
 * de backends necesarios para el funcionamiento en Google Cloud API Gateway.
 *
 * @param spec - Especificaci√≥n Swagger 2.0 base
 * @param envVars - URLs validadas de los servicios backend
 * @param config - Configuraci√≥n del gateway
 * @returns Especificaci√≥n mejorada para Google Cloud
 *
 * @example
 * ```typescript
 * const enhanced = enhanceSpecForGoogleCloud(baseSpec, serviceUrls, config);
 * console.log('Especificaci√≥n optimizada para Google Cloud');
 * ```
 */
function enhanceSpecForGoogleCloud(
  spec: SwaggerV2Document,
  envVars: Record<string, string>,
  config: Config
): SwaggerV2Document {
  const enhancedSpec = { ...spec };

  // Configuraci√≥n de gesti√≥n para Google Cloud
  Object.assign(enhancedSpec.info, {
    'x-google-management': {
      metrics: [
        {
          name: 'request_count',
          display_name: 'Request Count',
          value_type: 'INT64',
          metric_kind: 'DELTA',
        },
        {
          name: 'request_latency',
          display_name: 'Request Latency',
          value_type: 'DISTRIBUTION',
          metric_kind: 'DELTA',
        },
      ],
      quota: {
        limits: [
          {
            name: 'RequestsPerMinutePerProject',
            metric: 'request_count',
            unit: '1/min/{project}',
            values: { STANDARD: 10000 },
          },
        ],
      },
    },
    'x-google-endpoints': [
      {
        name: `${config.gatewayTitle
          .toLowerCase()
          .replace(/\s+/g, '-')}-gateway`,
        allowCors: true,
      },
    ],
  });

  // A√±adir esquemas de seguridad para Swagger 2.0 (Google Cloud compatible)
  if (!enhancedSpec.securityDefinitions) {
    enhancedSpec.securityDefinitions = {};
  }

  const securitySchemes: Record<string, SecurityDefinition> = {
    // Google Cloud API Gateway solo acepta estos formatos espec√≠ficos
    api_key: {
      type: 'apiKey',
      name: 'key',
      in: 'query',
    },
    // Alternativa con x-api-key header (tambi√©n soportada)
    x_api_key: {
      type: 'apiKey',
      name: 'x-api-key',
      in: 'header',
    },
  };

  securitySchemes['firebase_auth'] = {
    type: 'oauth2',
    authorizationUrl: `https://securetoken.google.com/${config.projectId}`,
    flow: 'implicit',
    'x-google-issuer': `https://securetoken.google.com/${config.projectId}`,
    'x-google-jwks_uri':
      'https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com',
    'x-google-audiences': config.projectId,
  };

  Object.assign(enhancedSpec.securityDefinitions, securitySchemes);

  // A√±adir seguridad global (todas las operaciones requieren API key por defecto)
  enhancedSpec.security = [{ api_key: [] }, { x_api_key: [] }];

  // Configurar backends para cada path
  const HTTP_METHODS = [
    'get',
    'post',
    'put',
    'delete',
    'patch',
    'options',
    'head',
    'trace',
  ];

  if (enhancedSpec.paths) {
    Object.keys(enhancedSpec.paths).forEach((pathKey) => {
      const pathItem = enhancedSpec.paths?.[
        pathKey
      ] as OpenAPIV3.PathItemObject;

      HTTP_METHODS.forEach((method) => {
        const operation = pathItem[method as keyof OpenAPIV3.PathItemObject];
        if (
          operation &&
          typeof operation === 'object' &&
          !Array.isArray(operation)
        ) {
          const service = SERVICES.find((s) =>
            pathKey.startsWith(s.pathPrefix)
          );
          if (service) {
            Object.assign(operation, {
              'x-google-backend': {
                address: envVars[service.urlEnvVar],
                protocol: config.protocol === 'https' ? 'h2' : 'http/1.1',
                path_translation: 'APPEND_PATH_TO_ADDRESS',
              },
              // Asegurar que cada operaci√≥n tenga seguridad (API key requerida)
              security: operation.security || [
                { api_key: [] },
                { x_api_key: [] },
              ],
            });
          }
        }
      });
    });
  }

  return enhancedSpec;
}

// ================================================================================================
// üíæ SECCI√ìN 7: UTILIDADES DE APOYO
// ================================================================================================

/**
 * Muestra estad√≠sticas de la especificaci√≥n generada
 *
 * @param filePath - Ruta del archivo generado
 * @param pathCount - N√∫mero de paths en la especificaci√≥n
 * @param definitionCount - N√∫mero de definiciones en la especificaci√≥n
 */
function logSpecificationStats(
  filePath: string,
  pathCount: number,
  definitionCount: number
): void {
  console.log(`‚úÖ Especificaci√≥n OpenAPI generada con √©xito:`);
  console.log(`   üìÑ Archivo: ${filePath}`);
  console.log(`   üìä Paths: ${pathCount}`);
  console.log(`   üß© Definitions: ${definitionCount}`);
}

/**
 * Muestra los pr√≥ximos pasos recomendados despu√©s de la generaci√≥n
 *
 * @param outputFile - Nombre del archivo generado
 */
function logNextSteps(outputFile: string): void {
  const isDev = outputFile.includes('dev');
  const environment = isDev ? 'dev' : 'prod';

  console.log('\nüìö Pr√≥ximos pasos:');
  console.log(`   Desplegar: npm run gateway:deploy:${environment}`);
  console.log(`   Gateway completo: npm run gateway:${environment}`);
}

// ================================================================================================
// üéØ SECCI√ìN 8: ORQUESTADOR PRINCIPAL
// ================================================================================================

/**
 * Funci√≥n principal del generador de OpenAPI
 *
 * Orquesta todo el proceso de generaci√≥n desde el descubrimiento de servicios
 * hasta la escritura del archivo final optimizado para Google Cloud.
 *
 * PROCESO COMPLETO:
 * 1. üîç Validaci√≥n de entorno y configuraci√≥n
 * 2. üöÄ Descubrimiento de servicios disponibles
 * 3. üì¶ Carga din√°mica de m√≥dulos NestJS
 * 4. ‚öôÔ∏è  Generaci√≥n de especificaciones desde c√≥digo real
 * 5. üîó Combinaci√≥n de m√∫ltiples servicios
 * 6. üîÑ Conversi√≥n OpenAPI 3.0 ‚Üí Swagger 2.0
 * 7. ‚òÅÔ∏è  Optimizaci√≥n para Google Cloud API Gateway
 * 8. üíæ Escritura del archivo final
 *
 * @returns Promise que resuelve cuando la generaci√≥n se completa exitosamente
 *
 * @throws {Error} Si ocurre cualquier error durante el proceso
 */
async function generateSpec() {
  // Validar entorno y configuraci√≥n
  validateEnvironment();
  const config = getConfig();
  const envVars = validateServiceUrls();

  console.log('üìã Configuraci√≥n detectada:');
  console.log(`   - T√≠tulo: ${config.gatewayTitle}`);
  console.log(`   - Versi√≥n: ${config.gatewayVersion}`);
  console.log(`   - Archivo de salida: ${config.outputFile}`);
  console.log(`   - Protocolo: ${config.protocol}`);
  console.log(`   - Google Cloud Project: ${config.projectId}`);

  console.log('üì° URLs de servicios:');
  SERVICES.forEach((service) => {
    console.log(`   - ${service.title}: ${envVars[service.urlEnvVar]}`);
  });

  // Cargar m√≥dulos din√°micamente
  console.log('üì¶ Cargando m√≥dulos de aplicaci√≥n...');
  for (const service of SERVICES) {
    try {
      service.module = await loadAppModule(service.name);
      console.log(`   ‚úÖ ${service.title} cargado correctamente`);
    } catch (error) {
      console.error(`   ‚ùå Error cargando ${service.title}:`, error);
      process.exit(1);
    }
  }

  // Generar un documento de Swagger para cada servicio A PARTIR DEL C√ìDIGO REAL
  console.log('üöÄ Generando especificaciones reales desde c√≥digo...');
  const serviceDocuments = await Promise.all(
    SERVICES.map(async (service) => {
      console.log(`üîß Procesando ${service.title}...`);
      try {
        if (!service.module) {
          throw new Error(`M√≥dulo no cargado para ${service.title}`);
        }
        const doc = await buildSwagger(service.module, service.title);
        console.log(`   ‚úÖ ${service.title} completado`);
        return doc;
      } catch (error) {
        console.error(`   ‚ùå Error generando ${service.title}:`, error);
        throw error;
      }
    })
  );

  // Combinar y convertir los documentos generados
  console.log('üîó Combinando especificaciones OpenAPI 3.0...');

  // Primero combinamos todos los documentos OpenAPI 3.0
  const combinedOpenAPI3: OpenAPIV3.Document = {
    openapi: '3.0.0',
    info: {
      title: config.gatewayTitle,
      description: config.gatewayDescription,
      version: config.gatewayVersion,
    },
    paths: {},
    components: {
      schemas: {},
      securitySchemes: {},
    },
  };

  // Combinar paths, schemas y security schemes de todos los servicios
  serviceDocuments.forEach((doc) => {
    // Combinar paths
    if (doc.paths) {
      Object.assign(combinedOpenAPI3.paths, doc.paths);
    }

    // Combinar schemas
    if (doc.components?.schemas && combinedOpenAPI3.components?.schemas) {
      Object.assign(
        combinedOpenAPI3.components.schemas,
        doc.components.schemas
      );
    }

    // Combinar security schemes
    if (
      doc.components?.securitySchemes &&
      combinedOpenAPI3.components?.securitySchemes
    ) {
      Object.assign(
        combinedOpenAPI3.components.securitySchemes,
        doc.components.securitySchemes
      );
    }
  });

  // Convertir de OpenAPI 3.0 a Swagger 2.0 usando api-spec-converter
  console.log(
    '‚öôÔ∏è Convirtiendo OpenAPI 3.0 ‚Üí Swagger 2.0 (para Google Cloud)...'
  );

  let finalCombinedSpec: SwaggerV2Document;
  try {
    const converter = Converter.convert({
      from: 'openapi_3',
      to: 'swagger_2',
      source: combinedOpenAPI3,
    });

    const result = (await converter) as ConversionResult;
    if (result.errors && result.errors.length > 0) {
      console.warn('‚ö†Ô∏è Advertencias durante la conversi√≥n:');
      result.errors.forEach((error: ConversionError) => {
        console.warn(`   - ${error.message || error}`);
      });
    }

    finalCombinedSpec = result.spec;
    console.log('‚úÖ Conversi√≥n completada exitosamente');
  } catch (error) {
    console.error(
      '‚ùå Error durante la conversi√≥n OpenAPI 3.0 ‚Üí Swagger 2.0:',
      error
    );
    throw error;
  }

  // Limpiar security definitions incompatibles con Google Cloud
  console.log('üßπ Limpiando security definitions para Google Cloud...');
  const securityDefinitions = finalCombinedSpec.securityDefinitions;
  if (securityDefinitions) {
    Object.keys(securityDefinitions).forEach((key) => {
      const secDef = securityDefinitions[key];
      if (secDef.type === 'apiKey') {
        const isValidApiKey =
          (secDef.name === 'key' && secDef.in === 'query') ||
          (secDef.name === 'api_key' && secDef.in === 'query') ||
          (secDef.name === 'x-api-key' && secDef.in === 'header');

        if (!isValidApiKey) {
          console.log(
            `   ‚ö†Ô∏è Removiendo security definition incompatible: ${key} (name: ${secDef.name}, in: ${secDef.in})`
          );
          delete securityDefinitions[key];
        }
      } else if (secDef.type !== 'oauth2') {
        // Remover otros tipos no soportados
        console.log(
          `   ‚ö†Ô∏è Removiendo security definition no soportado: ${key} (type: ${secDef.type})`
        );
        delete securityDefinitions[key];
      }
    });
  }

  // Inyectar la configuraci√≥n de Google Cloud
  console.log('‚òÅÔ∏è A√±adiendo configuraci√≥n de Google Cloud API Gateway...');
  const finalSpec = enhanceSpecForGoogleCloud(
    finalCombinedSpec,
    envVars,
    config
  );

  // Escribir archivo final
  console.log('üíæ Escribiendo archivo de especificaci√≥n...');
  const outputPath = path.resolve(config.outputFile);
  fs.writeFileSync(outputPath, YAML.stringify(finalSpec), 'utf8');

  // Mostrar estad√≠sticas y pr√≥ximos pasos
  logSpecificationStats(
    outputPath,
    Object.keys(finalSpec.paths || {}).length,
    Object.keys(finalSpec.definitions || {}).length
  );

  logNextSteps(config.outputFile);
}

// --- FUNCI√ìN PRINCIPAL CON MANEJO DE ERRORES ---
async function main(): Promise<void> {
  if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
üîß Generador de Especificaci√≥n OpenAPI para Google Cloud API Gateway

Genera especificaciones OpenAPI REALES extrayendo la configuraci√≥n de Swagger de tus APIs NestJS.

USAGE:
  node generate-openapi.js [OPTIONS]

OPTIONS:
  --output <file>         Archivo de salida (default: openapi-gateway.yaml)
  --title <title>         T√≠tulo del gateway (default: Monorepo API Gateway)
  --description <desc>    Descripci√≥n del gateway
  --version <version>     Versi√≥n del gateway (default: 1.0.0)
  --protocol <protocol>   Protocolo de backend (default: https)
  --project-id <id>       Google Cloud Project ID (para Firebase Auth)
  --help                  Mostrar esta ayuda

VARIABLES DE ENTORNO REQUERIDAS:
  USERS_BACKEND_URL       URL del servicio de usuarios
  ORDERS_BACKEND_URL      URL del servicio de √≥rdenes

CARACTER√çSTICAS:
  ‚úÖ Extrae configuraci√≥n REAL de Swagger de tus APIs NestJS
  ‚úÖ Auto-discovery de servicios v√≠a variables de entorno
  ‚úÖ Conversi√≥n autom√°tica OpenAPI 3.0 ‚Üí Swagger 2.0
  ‚úÖ Configuraci√≥n optimizada para Google Cloud API Gateway
`);
    process.exit(0);
  }

  try {
    await generateSpec();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error fatal durante la generaci√≥n:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
