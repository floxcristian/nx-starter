/**
 * @fileoverview Utilidades para logging y mensajes de consola
 *
 * Proporciona funciones estructuradas para mostrar mensajes
 * informativos, de error y de estado durante la ejecuci√≥n.
 */

import { Config, ServiceConfig, ValidatedServiceUrls } from '../types/index';

/**
 * Niveles de log disponibles
 */
export enum LogLevel {
  INFO = 'info',
  SUCCESS = 'success',
  WARNING = 'warning',
  ERROR = 'error',
}

/**
 * Iconos para diferentes tipos de mensajes
 */
const LOG_ICONS = {
  [LogLevel.INFO]: 'üîç',
  [LogLevel.SUCCESS]: '‚úÖ',
  [LogLevel.WARNING]: '‚ö†Ô∏è',
  [LogLevel.ERROR]: '‚ùå',
} as const;

/**
 * Muestra un mensaje con el nivel y formato apropiado
 *
 * @param level - Nivel del mensaje
 * @param message - Mensaje a mostrar
 * @param details - Detalles adicionales opcionales
 *
 * @example
 * ```typescript
 * logMessage(LogLevel.SUCCESS, 'Operaci√≥n completada');
 * logMessage(LogLevel.ERROR, 'Error cr√≠tico', 'Detalles del error...');
 * ```
 */
export function logMessage(
  level: LogLevel,
  message: string,
  details?: string
): void {
  const icon = LOG_ICONS[level];
  console.log(`${icon} ${message}`);

  if (details) {
    console.log(`   ${details}`);
  }
}

/**
 * Muestra la configuraci√≥n detectada de forma estructurada
 *
 * @param config - Configuraci√≥n del generador
 *
 * @example
 * ```typescript
 * logConfiguration(config);
 * // üìã Configuraci√≥n detectada:
 * //    - T√≠tulo: Mi API Gateway
 * //    - Versi√≥n: 1.0.0
 * //    ...
 * ```
 */
export function logConfiguration(config: Config): void {
  console.log('üìã Configuraci√≥n detectada:');
  console.log(`   - T√≠tulo: ${config.gatewayTitle}`);
  console.log(`   - Versi√≥n: ${config.gatewayVersion}`);
  console.log(`   - Archivo de salida: ${config.outputFile}`);
  console.log(`   - Protocolo: ${config.protocol}`);
  console.log(`   - Google Cloud Project: ${config.projectId}`);
}

/**
 * Muestra un resumen de los servicios y sus URLs
 *
 * @param services - Configuraciones de servicios
 * @param serviceUrls - URLs validadas de los servicios
 *
 * @example
 * ```typescript
 * logServicesSummary(services, urls);
 * // üì° URLs de servicios:
 * //    - Users API: https://api.example.com/users
 * //    - Orders API: https://api.example.com/orders
 * ```
 */
export function logServicesSummary(
  services: ServiceConfig[],
  serviceUrls: ValidatedServiceUrls
): void {
  console.log('üì° URLs de servicios:');
  services.forEach((service) => {
    console.log(`   - ${service.title}: ${serviceUrls[service.urlEnvVar]}`);
  });
}

/**
 * Muestra estad√≠sticas de la especificaci√≥n generada
 *
 * @param filePath - Ruta del archivo generado
 * @param pathCount - N√∫mero de paths en la especificaci√≥n
 * @param definitionCount - N√∫mero de definiciones en la especificaci√≥n
 *
 * @example
 * ```typescript
 * logSpecificationStats('./api-spec.yaml', 15, 8);
 * // ‚úÖ Especificaci√≥n OpenAPI generada con √©xito:
 * //    üìÑ Archivo: ./api-spec.yaml
 * //    üìä Paths: 15
 * //    üß© Definitions: 8
 * ```
 */
export function logSpecificationStats(
  filePath: string,
  pathCount: number,
  definitionCount: number
): void {
  console.log(`‚úÖ Especificaci√≥n OpenAPI generada con √©xito:`);
  console.log(`   üìÑ Archivo: ${filePath}`);
  console.log(`   üìä Paths: ${pathCount}`);
  console.log(`   üß© Definitions: ${definitionCount}`);
}

/**
 * Muestra los pr√≥ximos pasos despu√©s de generar la especificaci√≥n
 *
 * @param outputFile - Nombre del archivo generado
 * @param environment - Entorno target ('dev' o 'prod')
 *
 * @example
 * ```typescript
 * logNextSteps('mi-empresa-api-dev.yaml', 'dev');
 * // üìö Pr√≥ximos pasos:
 * //    Desplegar: npm run gateway:deploy:dev
 * //    Gateway completo: npm run gateway:dev
 * ```
 */
export function logNextSteps(
  outputFile: string,
  environment: 'dev' | 'prod'
): void {
  console.log('\nüìö Pr√≥ximos pasos:');
  console.log(`   Desplegar: npm run gateway:deploy:${environment}`);
  console.log(`   Gateway completo: npm run gateway:${environment}`);
}

/**
 * Muestra un mensaje de error con formato est√°ndar
 *
 * @param message - Mensaje de error principal
 * @param details - Detalles adicionales del error
 *
 * @example
 * ```typescript
 * logError('Error de validaci√≥n', 'La URL no es v√°lida');
 * // ‚ùå Error de validaci√≥n
 * //    La URL no es v√°lida
 * ```
 */
export function logError(message: string, details?: string): void {
  logMessage(LogLevel.ERROR, message, details);
}

/**
 * Muestra un mensaje de √©xito con formato est√°ndar
 *
 * @param message - Mensaje de √©xito
 * @param details - Detalles adicionales opcionales
 *
 * @example
 * ```typescript
 * logSuccess('Proceso completado', 'Todos los servicios procesados');
 * // ‚úÖ Proceso completado
 * //    Todos los servicios procesados
 * ```
 */
export function logSuccess(message: string, details?: string): void {
  logMessage(LogLevel.SUCCESS, message, details);
}

/**
 * Muestra un mensaje informativo con formato est√°ndar
 *
 * @param message - Mensaje informativo
 * @param details - Detalles adicionales opcionales
 *
 * @example
 * ```typescript
 * logInfo('Iniciando proceso', 'Cargando configuraci√≥n...');
 * // üîç Iniciando proceso
 * //    Cargando configuraci√≥n...
 * ```
 */
export function logInfo(message: string, details?: string): void {
  logMessage(LogLevel.INFO, message, details);
}

/**
 * Muestra un mensaje de advertencia con formato est√°ndar
 *
 * @param message - Mensaje de advertencia
 * @param details - Detalles adicionales opcionales
 *
 * @example
 * ```typescript
 * logWarning('Configuraci√≥n incompleta', 'Usando valores por defecto');
 * // ‚ö†Ô∏è Configuraci√≥n incompleta
 * //    Usando valores por defecto
 * ```
 */
export function logWarning(message: string, details?: string): void {
  logMessage(LogLevel.WARNING, message, details);
}
