FROM node:18-alpine AS development

WORKDIR /usr/src/app 

# Establecer entorno de desarrollo
ARG NODE_ENV=development
ENV NODE_ENV=${NODE_ENV}

# Instalar pnpm 
RUN npm install -g pnpm

# Copiar configuración de workspace
COPY pnpm-workspace.yaml ./

# Copiar archivos de configuración y dependencias del root
COPY package.json pnpm-lock.yaml ./

# Copiar package.json específico de la aplicación
COPY libs/users-domain/package.json ./libs/users-domain/

# Copiar archivos de configuración de TypeScript y NestJS
#COPY tsconfig.json nest-cli.json ./


# Instalar solo dependencias necesarias para api-users + users-domain
RUN pnpm install --filter api-users --filter users-domain --frozen-lockfile

# Copiar código fuente completo (filtrado por .dockerignore)
COPY apps/api-users/ ./apps/api-users/
COPY libs/users-domain/ ./libs/users-domain/

# Build de solo las librerías que necesita api-users
RUN pnpm nx build users-domain
RUN pnpm nx build api-users

FROM node:alpine AS production

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /usr/src/app

# Instalar pnpm
RUN npm install -g pnpm

# Copiar configuración de workspace
COPY pnpm-workspace.yaml ./

# Copiar archivos de configuración y dependencias del root
COPY package.json pnpm-lock.yaml ./

# Copiar package.json específico de la aplicación
COPY libs/users-domain/package.json ./libs/users-domain/|

# Instalar solo dependencias de producción para api-users + users-domain
RUN pnpm install --filter users-domain --prod --frozen-lockfile && pnpm store prune

# Copiar build desde etapa anterior
COPY --from=development /usr/src/app/dist ./dist

CMD ["node", "dist/apps/api-users/main"]